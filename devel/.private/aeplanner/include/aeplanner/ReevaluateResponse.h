// Generated by gencpp from file aeplanner/ReevaluateResponse.msg
// DO NOT EDIT!


#ifndef AEPLANNER_MESSAGE_REEVALUATERESPONSE_H
#define AEPLANNER_MESSAGE_REEVALUATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aeplanner
{
template <class ContainerAllocator>
struct ReevaluateResponse_
{
  typedef ReevaluateResponse_<ContainerAllocator> Type;

  ReevaluateResponse_()
    : gain()
    , yaw()  {
    }
  ReevaluateResponse_(const ContainerAllocator& _alloc)
    : gain(_alloc)
    , yaw(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _gain_type;
  _gain_type gain;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::aeplanner::ReevaluateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aeplanner::ReevaluateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ReevaluateResponse_

typedef ::aeplanner::ReevaluateResponse_<std::allocator<void> > ReevaluateResponse;

typedef boost::shared_ptr< ::aeplanner::ReevaluateResponse > ReevaluateResponsePtr;
typedef boost::shared_ptr< ::aeplanner::ReevaluateResponse const> ReevaluateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aeplanner::ReevaluateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aeplanner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'aeplanner': ['/home/idris/catkin_ws/src/aeplanner/aeplanner/msg', '/home/idris/catkin_ws/devel/.private/aeplanner/share/aeplanner/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/melodic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aeplanner::ReevaluateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aeplanner::ReevaluateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aeplanner::ReevaluateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c438d60b887bb182c86699eb4d27de35";
  }

  static const char* value(const ::aeplanner::ReevaluateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc438d60b887bb182ULL;
  static const uint64_t static_value2 = 0xc86699eb4d27de35ULL;
};

template<class ContainerAllocator>
struct DataType< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aeplanner/ReevaluateResponse";
  }

  static const char* value(const ::aeplanner::ReevaluateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] gain\n\
float64[] yaw\n\
\n\
";
  }

  static const char* value(const ::aeplanner::ReevaluateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gain);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReevaluateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aeplanner::ReevaluateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aeplanner::ReevaluateResponse_<ContainerAllocator>& v)
  {
    s << indent << "gain[]" << std::endl;
    for (size_t i = 0; i < v.gain.size(); ++i)
    {
      s << indent << "  gain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gain[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEPLANNER_MESSAGE_REEVALUATERESPONSE_H
