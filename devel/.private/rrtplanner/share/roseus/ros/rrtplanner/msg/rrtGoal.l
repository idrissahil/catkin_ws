;; Auto-generated. Do not edit!


(when (boundp 'rrtplanner::rrtGoal)
  (if (not (find-package "RRTPLANNER"))
    (make-package "RRTPLANNER"))
  (shadow 'rrtGoal (find-package "RRTPLANNER")))
(unless (find-package "RRTPLANNER::RRTGOAL")
  (make-package "RRTPLANNER::RRTGOAL"))

(in-package "ROS")
;;//! \htmlinclude rrtGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass rrtplanner::rrtGoal
  :super ros::object
  :slots (_start _goal_poses ))

(defmethod rrtplanner::rrtGoal
  (:init
   (&key
    ((:start __start) (instance geometry_msgs::PoseStamped :init))
    ((:goal_poses __goal_poses) (instance geometry_msgs::PoseArray :init))
    )
   (send-super :init)
   (setq _start __start)
   (setq _goal_poses __goal_poses)
   self)
  (:start
   (&rest __start)
   (if (keywordp (car __start))
       (send* _start __start)
     (progn
       (if __start (setq _start (car __start)))
       _start)))
  (:goal_poses
   (&rest __goal_poses)
   (if (keywordp (car __goal_poses))
       (send* _goal_poses __goal_poses)
     (progn
       (if __goal_poses (setq _goal_poses (car __goal_poses)))
       _goal_poses)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _start
    (send _start :serialization-length)
    ;; geometry_msgs/PoseArray _goal_poses
    (send _goal_poses :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _start
       (send _start :serialize s)
     ;; geometry_msgs/PoseArray _goal_poses
       (send _goal_poses :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _start
     (send _start :deserialize buf ptr-) (incf ptr- (send _start :serialization-length))
   ;; geometry_msgs/PoseArray _goal_poses
     (send _goal_poses :deserialize buf ptr-) (incf ptr- (send _goal_poses :serialization-length))
   ;;
   self)
  )

(setf (get rrtplanner::rrtGoal :md5sum-) "0e83561ba81ebf93b30fd2df01757c10")
(setf (get rrtplanner::rrtGoal :datatype-) "rrtplanner/rrtGoal")
(setf (get rrtplanner::rrtGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
geometry_msgs/PoseStamped start
geometry_msgs/PoseArray goal_poses

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

")



(provide :rrtplanner/rrtGoal "0e83561ba81ebf93b30fd2df01757c10")


